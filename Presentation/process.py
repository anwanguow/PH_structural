#!/usr/bin/env python3# -*- coding: utf-8 -*-import matplotlib.pyplot as pltimport numpy as npfrom ripser import ripserfrom scipy.spatial import Delaunay, distance_matrixfrom PI import PIxyz_file_path = 'niclosamide.xyz'myspread = 0.0005radii_ = [0.1, 1.9, 2, 2.15, 2.5, 3]def read_xyz(file_path):    with open(file_path, 'r') as file:        lines = file.readlines()        atom_count = int(lines[0].strip())        atoms = []        for line in lines[2:2+atom_count]:            parts = line.split()            element = parts[0]            x, y, z = float(parts[1]), float(parts[2]), float(parts[3])            atoms.append((element, x, y, z))        return atomsdef center_atoms(atoms):    coords = np.array([(x, y, z) for _, x, y, z in atoms])    centroid = np.mean(coords, axis=0)    centered_atoms = [(element, x - centroid[0], y - centroid[1], z - centroid[2]) for element, x, y, z in atoms]    return centered_atomsdef compute_persistence_diagrams(atoms, max_radius):    coords = np.array([(x, y, z) for _, x, y, z in atoms])    diagrams = ripser(coords, maxdim=2, thresh=max_radius)['dgms']    return diagramsdef project_area(coords, elev, azim):    fig = plt.figure()    ax = fig.add_subplot(111, projection='3d')    ax.scatter(coords[:, 0], coords[:, 1], coords[:, 2])    ax.view_init(elev=elev, azim=azim)    ax.set_proj_type('ortho')    proj = ax.get_proj()    xy = proj[:2, :3] @ coords.T    plt.close(fig)    return np.sum(np.linalg.norm(xy, axis=0))def find_best_view(coords):    angles = np.linspace(0, 360, num=36)    elevations = np.linspace(-90, 90, num=36)    max_area = 0    best_elev = 0    best_azim = 0    for elev in elevations:        for azim in angles:            area = project_area(coords, elev, azim)            if area > max_area:                max_area = area                best_elev = elev                best_azim = azim    return best_elev, best_azimdef plot_persistence_diagrams(diagrams, ax, max_radius, offset=0.05, show_legend=False):    colors = ['#ff9999', '#66b3ff', '#99ff99']    labels = ['H0', 'H1', 'H2']        for i, diagram in enumerate(diagrams):        if len(diagram) > 0:            births = diagram[:, 0]            deaths = diagram[:, 1]            lifetimes = deaths - births            is_alive = np.isinf(deaths)            deaths[is_alive] = max_radius            lifetimes = deaths - births            ax.scatter(births, lifetimes, label=labels[i], color=colors[i], edgecolor='k', alpha=0.7, s=400)    ax.set_xlim(-max_radius * offset, max_radius * 1.1)    ax.set_ylim(-max_radius * offset, max_radius * 1.1)    ax.set_xlabel('Birth', fontsize=28)    ax.set_ylabel('Lifetime', fontsize=28)    if show_legend:        ax.legend(fontsize=28)def plot_molecule_with_radii_and_persistence(atoms, radii, save_path):    fig = plt.figure(figsize=(36, 24), dpi=300)    axes = []    coords = np.array([(x, y, z) for _, x, y, z in atoms])    best_elev, best_azim = find_best_view(coords)    x_min, y_min, z_min = np.min(coords, axis=0)    x_max, y_max, z_max = np.max(coords, axis=0)    for i, radius in enumerate(radii):        # First row: 3D molecule structure        ax = fig.add_subplot(4, len(radii), i+1, projection='3d')        ax.set_box_aspect([1, 1, 1])        axes.append(ax)        tri = Delaunay(coords)        dist_matrix = distance_matrix(coords, coords)        edges = np.where(dist_matrix < radius)        for i, j in zip(edges[0], edges[1]):            if i < j:                ax.plot([coords[i, 0], coords[j, 0]],                         [coords[i, 1], coords[j, 1]],                         [coords[i, 2], coords[j, 2]], 'k-', lw=2)        for simplex in tri.simplices:            pts = coords[simplex]            dists = [np.linalg.norm(pts[i] - pts[j]) for i in range(3) for j in range(i + 1, 3)]            if max(dists) < radius:                ax.plot_trisurf(pts[:, 0], pts[:, 1], pts[:, 2], color='cyan', alpha=0.2)        ax.scatter(coords[:, 0], coords[:, 1], coords[:, 2], color='r', s=100)        ax.set_xlim([x_min, x_max])        ax.set_ylim([y_min, y_max])        ax.set_zlim([z_min, z_max])        ax.view_init(elev=best_elev, azim=best_azim)        ax.axis('off')    max_x_limit = 0    barcode_data = []    for i, radius in enumerate(radii):        diagrams = compute_persistence_diagrams(atoms, radius)        barcode_data.append(diagrams)        for dim, diagram in enumerate(diagrams):            if len(diagram) > 0:                finite_deaths = diagram[:, 1][~np.isinf(diagram[:, 1])]                if len(finite_deaths) > 0:                    max_x_limit = max(max_x_limit, np.max(finite_deaths))    max_x_limit *= 1.1    for i, radius in enumerate(radii):        diagrams = barcode_data[i]        ax = fig.add_subplot(4, len(radii), len(radii) + i + 1)        ax.set_box_aspect(1)        axes.append(ax)        total_bars = 0                for dim, diagram in enumerate(diagrams):            if len(diagram) > 0:                sorted_diagram = diagram[np.argsort(diagram[:, 0])]                                for j, (birth, death) in enumerate(sorted_diagram):                    lifetime = death - birth                    if np.isinf(death):                        death = radius                        lifetime = death - birth                    ax.plot([birth, death],                             [total_bars + j + 0.5, total_bars + j + 0.5],                             color=['#ff9999', '#66b3ff', '#99ff99'][dim], lw=8, alpha=0.8)                total_bars += len(sorted_diagram)        ax.set_xlim(-radius * 0.05, max_x_limit)        ax.set_ylim(total_bars + 1, -0.5)        ax.yaxis.set_visible(False)        ax.spines['top'].set_visible(False)        ax.spines['right'].set_visible(False)        ax.spines['left'].set_visible(False)        ax.spines['bottom'].set_color('k')        ax = fig.add_subplot(4, len(radii), 2 * len(radii) + i + 1)        ax.set_box_aspect(1)        axes.append(ax)        plot_persistence_diagrams(diagrams, ax, radius, offset=0.05, show_legend=True)        pim = PI(pixels=[10, 10], spread=myspread, specs={"maxBD": radius, "minBD": 0}, kernel_type="gaussian", verbose=False)        imgs = pim.transform(diagrams)        ax = fig.add_subplot(4, len(radii), 3 * len(radii) + i + 1)        axes.append(ax)        pim.show(imgs, ax=ax)        ax.text(0.5, -0.15, r'$\epsilon$ = {:.2f}'.format(radius), transform=ax.transAxes, fontsize=38, va='center', ha='center')    for ax in axes:        ax.set_facecolor('white')        ax.spines['top'].set_color('k')        ax.spines['right'].set_color('k')        ax.spines['left'].set_color('k')        ax.spines['bottom'].set_color('k')        ax.xaxis.label.set_color('k')        ax.yaxis.label.set_color('k')        ax.title.set_color('k')        ax.tick_params(colors='k', labelsize=24)    fig.text(0.005, 0.88, 'Molecule', va='center', ha='right', rotation='vertical', fontsize=36, color='gray')    fig.text(0.005, 0.64, 'Barcodes', va='center', ha='right', rotation='vertical', fontsize=36, color='gray')    fig.text(0.005, 0.39, 'Persistence Diagram', va='center', ha='right', rotation='vertical', fontsize=36, color='gray')    fig.text(0.005, 0.12, 'Persistence Image', va='center', ha='right', rotation='vertical', fontsize=36, color='gray')    plt.tight_layout(pad=1.0)    plt.savefig(save_path, dpi=300, bbox_inches='tight')    plt.show()atoms = read_xyz(xyz_file_path)centered_atoms = center_atoms(atoms)radii = radii_save_path = 'process.png'plot_molecule_with_radii_and_persistence(centered_atoms, radii, save_path)