import osimport numpy as npimport pandas as pdfrom ripser import ripserimport logginglogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')distance_matrix_path_template = "../data/distance_matrix/set_{N}/D_{M}/D_{F}.npy"label_file_template = "../data/label/label_set_{N}.csv"file_paths = []labels = []sources = []for N in range(1, 3):    label_file = label_file_template.format(N=N)    label_data = pd.read_csv(label_file, header=None)    for M in range(10):        for p in range(1, 34):            F = 100 + (p - 1) * 25            file_path = distance_matrix_path_template.format(N=N, M=M, F=F)            file_paths.append(file_path)            labels.append(label_data.iloc[M, p-1])            sources.append(f"set_{N}_D_{M}")def compute_and_save_barcodes(file_path, label, source, output_dir):    try:        points = np.load(file_path)        diagrams = ripser(points, maxdim=2, distance_matrix=True)['dgms']        barcode_data = {'H0': diagrams[0], 'H1': diagrams[1], 'H2': diagrams[2], 'label': label, 'path': file_path}        output_file = os.path.join(output_dir, f"{source}_{os.path.basename(file_path).replace('.npy', '')}_barcodes.npy")        np.save(output_file, barcode_data)        logging.info(f"Successfully saved barcodes for: {file_path}")    except Exception as e:        logging.error(f"Error processing file: {file_path}, {e}")output_dir = "barcodes"os.makedirs(output_dir, exist_ok=True)for file_path, label, source in zip(file_paths, labels, sources):    compute_and_save_barcodes(file_path, label, source, output_dir)